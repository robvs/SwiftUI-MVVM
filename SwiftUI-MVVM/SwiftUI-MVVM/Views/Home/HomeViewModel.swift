//
//  HomeViewModel.swift
//  SwiftUI-MVVM
//
//  Created by Rob Vander Sloot on 5/26/25.
//

import Combine
import OSLog

@MainActor
final class HomeViewModel: ViewModeling {
    @Published var state: HomeViewState

    private let session: any AppUrlSessionHandling
    private let router: any NavigationRouting

    /// Create a new instance.
    /// - Parameters:
    ///   - session: Injected URL session handler.
    ///   - session: Injected navigation router.
    init(session: any AppUrlSessionHandling, router: any NavigationRouting) {
        self.state = State()
        self.session = session
        self.router = router

        fetchRandomJoke()
        fetchCategories()
    }

    // MARK: Events

    /// View-related events, typically generated by the view.
    enum Event {
        case searchTextChanged(String)
        case categorySelected(name: String)
        case refreshButtonPressed
    }

    func send(event: Event) {
        switch event {
        case .searchTextChanged(let searchText):
            state.reduce(with: .filterCategories(searchText: searchText))
        case .categorySelected(let name):
            Logger.view.debug("Category selected: \(name)")
            router.push(.category(name: name))
        case .refreshButtonPressed:
            fetchRandomJoke()
        }
    }
}

// MARK: - Private Helpers

private extension HomeViewModel {
    func fetchRandomJoke() {
        state.reduce(with: .loadingRandomJoke)

        // run both random joke and categories requests in parallel.

        Task {
            let result: GetRandomJokeResult
            do {
                let joke: ChuckNorrisJoke = try await session.get(from: ChuckNorrisIoRequest.getRandomJoke().url)
                result = .success(joke)
            } catch let requestError as AppUrlSession.RequestError {
                result = .failure(requestError)
            } catch {
                result = .failure(AppUrlSession.RequestError.unexpected(error.localizedDescription))
            }

            state.reduce(with: .getRandomJokeResult(result))
        }
    }

    func fetchCategories() {
        Task {
            let result: GetCategoriesResult
            do {
                let categories: [String] = try await session.get(from: ChuckNorrisIoRequest.getCategories.url)
                result = .success(categories)
            } catch let requestError as AppUrlSession.RequestError {
                result = .failure(requestError)
            } catch {
                result = .failure(AppUrlSession.RequestError.unexpected(error.localizedDescription))
            }

            state.reduce(with: .getCategoriesResult(result))
        }
    }
}
